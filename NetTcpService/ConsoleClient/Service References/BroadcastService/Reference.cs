//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.BroadcastService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BroadcastService.IService", CallbackContract=typeof(ConsoleClient.BroadcastService.IServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSessionId", ReplyAction="http://tempuri.org/IService/GetSessionIdResponse")]
        string GetSessionId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSessionId", ReplyAction="http://tempuri.org/IService/GetSessionIdResponse")]
        System.Threading.Tasks.Task<string> GetSessionIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GetInService")]
        void GetInService(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GetInService")]
        System.Threading.Tasks.Task GetInServiceAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Dispose")]
        void Dispose(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Dispose")]
        System.Threading.Tasks.Task DisposeAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Broadcast")]
        void Broadcast(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Broadcast")]
        System.Threading.Tasks.Task BroadcastAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCurrentClients", ReplyAction="http://tempuri.org/IService/GetCurrentClientsResponse")]
        int GetCurrentClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCurrentClients", ReplyAction="http://tempuri.org/IService/GetCurrentClientsResponse")]
        System.Threading.Tasks.Task<int> GetCurrentClientsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SendMessage")]
        void SendMessage(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ConsoleClient.BroadcastService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<ConsoleClient.BroadcastService.IService>, ConsoleClient.BroadcastService.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetSessionId() {
            return base.Channel.GetSessionId();
        }
        
        public System.Threading.Tasks.Task<string> GetSessionIdAsync() {
            return base.Channel.GetSessionIdAsync();
        }
        
        public void GetInService(string id) {
            base.Channel.GetInService(id);
        }
        
        public System.Threading.Tasks.Task GetInServiceAsync(string id) {
            return base.Channel.GetInServiceAsync(id);
        }
        
        public void Dispose(string id) {
            base.Channel.Dispose(id);
        }
        
        public System.Threading.Tasks.Task DisposeAsync(string id) {
            return base.Channel.DisposeAsync(id);
        }
        
        public void Broadcast(string message) {
            base.Channel.Broadcast(message);
        }
        
        public System.Threading.Tasks.Task BroadcastAsync(string message) {
            return base.Channel.BroadcastAsync(message);
        }
        
        public int GetCurrentClients() {
            return base.Channel.GetCurrentClients();
        }
        
        public System.Threading.Tasks.Task<int> GetCurrentClientsAsync() {
            return base.Channel.GetCurrentClientsAsync();
        }
    }
}
